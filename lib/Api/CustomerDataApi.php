<?php
/**
 * CustomerDataApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * CustomerDataApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerDataApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getApplicationCustomer
     *
     * Get Application Customer
     *
     * @param  int $application_id  (required)
     * @param  int $customer_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ApplicationProfile
     */
    public function getApplicationCustomer($application_id, $customer_id)
    {
        list($response) = $this->getApplicationCustomerWithHttpInfo($application_id, $customer_id);
        return $response;
    }

    /**
     * Operation getApplicationCustomerWithHttpInfo
     *
     * Get Application Customer
     *
     * @param  int $application_id  (required)
     * @param  int $customer_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ApplicationProfile, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationCustomerWithHttpInfo($application_id, $customer_id)
    {
        $returnType = '\Swagger\Client\Model\ApplicationProfile';
        $request = $this->getApplicationCustomerRequest($application_id, $customer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApplicationProfile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationCustomerAsync
     *
     * Get Application Customer
     *
     * @param  int $application_id  (required)
     * @param  int $customer_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationCustomerAsync($application_id, $customer_id)
    {
        return $this->getApplicationCustomerAsyncWithHttpInfo($application_id, $customer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationCustomerAsyncWithHttpInfo
     *
     * Get Application Customer
     *
     * @param  int $application_id  (required)
     * @param  int $customer_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationCustomerAsyncWithHttpInfo($application_id, $customer_id)
    {
        $returnType = '\Swagger\Client\Model\ApplicationProfile';
        $request = $this->getApplicationCustomerRequest($application_id, $customer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationCustomer'
     *
     * @param  int $application_id  (required)
     * @param  int $customer_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getApplicationCustomerRequest($application_id, $customer_id)
    {
        // verify the required parameter 'application_id' is set
        if ($application_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_id when calling getApplicationCustomer'
            );
        }
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling getApplicationCustomer'
            );
        }

        $resourcePath = '/v1/applications/{applicationId}/customers/{customerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($application_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationId' . '}',
                ObjectSerializer::toPathValue($application_id),
                $resourcePath
            );
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationCustomers
     *
     * List Application Customers
     *
     * @param  int $application_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20015
     */
    public function getApplicationCustomers($application_id)
    {
        list($response) = $this->getApplicationCustomersWithHttpInfo($application_id);
        return $response;
    }

    /**
     * Operation getApplicationCustomersWithHttpInfo
     *
     * List Application Customers
     *
     * @param  int $application_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20015, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationCustomersWithHttpInfo($application_id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20015';
        $request = $this->getApplicationCustomersRequest($application_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20015',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationCustomersAsync
     *
     * List Application Customers
     *
     * @param  int $application_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationCustomersAsync($application_id)
    {
        return $this->getApplicationCustomersAsyncWithHttpInfo($application_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationCustomersAsyncWithHttpInfo
     *
     * List Application Customers
     *
     * @param  int $application_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationCustomersAsyncWithHttpInfo($application_id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20015';
        $request = $this->getApplicationCustomersRequest($application_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationCustomers'
     *
     * @param  int $application_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getApplicationCustomersRequest($application_id)
    {
        // verify the required parameter 'application_id' is set
        if ($application_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_id when calling getApplicationCustomers'
            );
        }

        $resourcePath = '/v1/applications/{applicationId}/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($application_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationId' . '}',
                ObjectSerializer::toPathValue($application_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationEventTypes
     *
     * List Applications Event Types
     *
     * @param  int $application_id application_id (required)
     * @param  int $page_size The number of items to include in this response. (optional)
     * @param  int $skip Skips the given number of items when paging through large result sets. (optional)
     * @param  string $sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20019
     */
    public function getApplicationEventTypes($application_id, $page_size = null, $skip = null, $sort = null)
    {
        list($response) = $this->getApplicationEventTypesWithHttpInfo($application_id, $page_size, $skip, $sort);
        return $response;
    }

    /**
     * Operation getApplicationEventTypesWithHttpInfo
     *
     * List Applications Event Types
     *
     * @param  int $application_id (required)
     * @param  int $page_size The number of items to include in this response. (optional)
     * @param  int $skip Skips the given number of items when paging through large result sets. (optional)
     * @param  string $sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20019, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationEventTypesWithHttpInfo($application_id, $page_size = null, $skip = null, $sort = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20019';
        $request = $this->getApplicationEventTypesRequest($application_id, $page_size, $skip, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20019',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationEventTypesAsync
     *
     * List Applications Event Types
     *
     * @param  int $application_id (required)
     * @param  int $page_size The number of items to include in this response. (optional)
     * @param  int $skip Skips the given number of items when paging through large result sets. (optional)
     * @param  string $sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationEventTypesAsync($application_id, $page_size = null, $skip = null, $sort = null)
    {
        return $this->getApplicationEventTypesAsyncWithHttpInfo($application_id, $page_size, $skip, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationEventTypesAsyncWithHttpInfo
     *
     * List Applications Event Types
     *
     * @param  int $application_id (required)
     * @param  int $page_size The number of items to include in this response. (optional)
     * @param  int $skip Skips the given number of items when paging through large result sets. (optional)
     * @param  string $sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationEventTypesAsyncWithHttpInfo($application_id, $page_size = null, $skip = null, $sort = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20019';
        $request = $this->getApplicationEventTypesRequest($application_id, $page_size, $skip, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationEventTypes'
     *
     * @param  int $application_id (required)
     * @param  int $page_size The number of items to include in this response. (optional)
     * @param  int $skip Skips the given number of items when paging through large result sets. (optional)
     * @param  string $sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getApplicationEventTypesRequest($application_id, $page_size = null, $skip = null, $sort = null)
    {
        // verify the required parameter 'application_id' is set
        if ($application_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_id when calling getApplicationEventTypes'
            );
        }

        $resourcePath = '/v1/applications/{applicationId}/event_types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }

        // path params
        if ($application_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationId' . '}',
                ObjectSerializer::toPathValue($application_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationEvents
     *
     * List Applications Events
     *
     * @param  int $application_id  (required)
     * @param  int $page_size The number of items to include in this response. (optional)
     * @param  int $skip Skips the given number of items when paging through large result sets. (optional)
     * @param  string $sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param  string $type Comma-separated list of types by which to filter events. Must be exact match(es). (optional)
     * @param  \DateTime $created_before Only return events created before this date (optional)
     * @param  \DateTime $created_after Only return events created after this date (optional)
     * @param  string $session Session integration ID filter for events. Must be exact match. (optional)
     * @param  string $profile Profile integration ID filter for events. Must be exact match. (optional)
     * @param  string $customer_name Customer name filter for events. Will match substrings case-insensitively. (optional)
     * @param  string $customer_email Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)
     * @param  string $effects_query Effects filter for events. Will perform a full-text search on the text content of the events effects, if any. (optional)
     * @param  string $attributes_query Attributes filter for events. Will perform a full-text search on the text content of the events attributes, both keys and values. (optional)
     * @param  string $rule_query Rule name filter for events (optional)
     * @param  string $campaign_query Campaign name filter for events (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20018
     */
    public function getApplicationEvents($application_id, $page_size = null, $skip = null, $sort = null, $type = null, $created_before = null, $created_after = null, $session = null, $profile = null, $customer_name = null, $customer_email = null, $effects_query = null, $attributes_query = null, $rule_query = null, $campaign_query = null)
    {
        list($response) = $this->getApplicationEventsWithHttpInfo($application_id, $page_size, $skip, $sort, $type, $created_before, $created_after, $session, $profile, $customer_name, $customer_email, $effects_query, $attributes_query, $rule_query, $campaign_query);
        return $response;
    }

    /**
     * Operation getApplicationEventsWithHttpInfo
     *
     * List Applications Events
     *
     * @param  int $application_id  (required)
     * @param  int $page_size The number of items to include in this response. (optional)
     * @param  int $skip Skips the given number of items when paging through large result sets. (optional)
     * @param  string $sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param  string $type Comma-separated list of types by which to filter events. Must be exact match(es). (optional)
     * @param  \DateTime $created_before Only return events created before this date (optional)
     * @param  \DateTime $created_after Only return events created after this date (optional)
     * @param  string $session Session integration ID filter for events. Must be exact match. (optional)
     * @param  string $profile Profile integration ID filter for events. Must be exact match. (optional)
     * @param  string $customer_name Customer name filter for events. Will match substrings case-insensitively. (optional)
     * @param  string $customer_email Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)
     * @param  string $effects_query Effects filter for events. Will perform a full-text search on the text content of the events effects, if any. (optional)
     * @param  string $attributes_query Attributes filter for events. Will perform a full-text search on the text content of the events attributes, both keys and values. (optional)
     * @param  string $rule_query Rule name filter for events (optional)
     * @param  string $campaign_query Campaign name filter for events (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20018, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationEventsWithHttpInfo($application_id, $page_size = null, $skip = null, $sort = null, $type = null, $created_before = null, $created_after = null, $session = null, $profile = null, $customer_name = null, $customer_email = null, $effects_query = null, $attributes_query = null, $rule_query = null, $campaign_query = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20018';
        $request = $this->getApplicationEventsRequest($application_id, $page_size, $skip, $sort, $type, $created_before, $created_after, $session, $profile, $customer_name, $customer_email, $effects_query, $attributes_query, $rule_query, $campaign_query);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20018',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationEventsAsync
     *
     * List Applications Events
     *
     * @param  int $application_id  (required)
     * @param  int $page_size The number of items to include in this response. (optional)
     * @param  int $skip Skips the given number of items when paging through large result sets. (optional)
     * @param  string $sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param  string $type Comma-separated list of types by which to filter events. Must be exact match(es). (optional)
     * @param  \DateTime $created_before Only return events created before this date (optional)
     * @param  \DateTime $created_after Only return events created after this date (optional)
     * @param  string $session Session integration ID filter for events. Must be exact match. (optional)
     * @param  string $profile Profile integration ID filter for events. Must be exact match. (optional)
     * @param  string $customer_name Customer name filter for events. Will match substrings case-insensitively. (optional)
     * @param  string $customer_email Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)
     * @param  string $effects_query Effects filter for events. Will perform a full-text search on the text content of the events effects, if any. (optional)
     * @param  string $attributes_query Attributes filter for events. Will perform a full-text search on the text content of the events attributes, both keys and values. (optional)
     * @param  string $rule_query Rule name filter for events (optional)
     * @param  string $campaign_query Campaign name filter for events (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationEventsAsync($application_id, $page_size = null, $skip = null, $sort = null, $type = null, $created_before = null, $created_after = null, $session = null, $profile = null, $customer_name = null, $customer_email = null, $effects_query = null, $attributes_query = null, $rule_query = null, $campaign_query = null)
    {
        return $this->getApplicationEventsAsyncWithHttpInfo($application_id, $page_size, $skip, $sort, $type, $created_before, $created_after, $session, $profile, $customer_name, $customer_email, $effects_query, $attributes_query, $rule_query, $campaign_query)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationEventsAsyncWithHttpInfo
     *
     * List Applications Events
     *
     * @param  int $application_id  (required)
     * @param  int $page_size The number of items to include in this response. (optional)
     * @param  int $skip Skips the given number of items when paging through large result sets. (optional)
     * @param  string $sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param  string $type Comma-separated list of types by which to filter events. Must be exact match(es). (optional)
     * @param  \DateTime $created_before Only return events created before this date (optional)
     * @param  \DateTime $created_after Only return events created after this date (optional)
     * @param  string $session Session integration ID filter for events. Must be exact match. (optional)
     * @param  string $profile Profile integration ID filter for events. Must be exact match. (optional)
     * @param  string $customer_name Customer name filter for events. Will match substrings case-insensitively. (optional)
     * @param  string $customer_email Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)
     * @param  string $effects_query Effects filter for events. Will perform a full-text search on the text content of the events effects, if any. (optional)
     * @param  string $attributes_query Attributes filter for events. Will perform a full-text search on the text content of the events attributes, both keys and values. (optional)
     * @param  string $rule_query Rule name filter for events (optional)
     * @param  string $campaign_query Campaign name filter for events (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationEventsAsyncWithHttpInfo($application_id, $page_size = null, $skip = null, $sort = null, $type = null, $created_before = null, $created_after = null, $session = null, $profile = null, $customer_name = null, $customer_email = null, $effects_query = null, $attributes_query = null, $rule_query = null, $campaign_query = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20018';
        $request = $this->getApplicationEventsRequest($application_id, $page_size, $skip, $sort, $type, $created_before, $created_after, $session, $profile, $customer_name, $customer_email, $effects_query, $attributes_query, $rule_query, $campaign_query);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationEvents'
     *
     * @param  int $application_id  (required)
     * @param  int $page_size The number of items to include in this response. (optional)
     * @param  int $skip Skips the given number of items when paging through large result sets. (optional)
     * @param  string $sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param  string $type Comma-separated list of types by which to filter events. Must be exact match(es). (optional)
     * @param  \DateTime $created_before Only return events created before this date (optional)
     * @param  \DateTime $created_after Only return events created after this date (optional)
     * @param  string $session Session integration ID filter for events. Must be exact match. (optional)
     * @param  string $profile Profile integration ID filter for events. Must be exact match. (optional)
     * @param  string $customer_name Customer name filter for events. Will match substrings case-insensitively. (optional)
     * @param  string $customer_email Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)
     * @param  string $effects_query Effects filter for events. Will perform a full-text search on the text content of the events effects, if any. (optional)
     * @param  string $attributes_query Attributes filter for events. Will perform a full-text search on the text content of the events attributes, both keys and values. (optional)
     * @param  string $rule_query Rule name filter for events (optional)
     * @param  string $campaign_query Campaign name filter for events (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getApplicationEventsRequest($application_id, $page_size = null, $skip = null, $sort = null, $type = null, $created_before = null, $created_after = null, $session = null, $profile = null, $customer_name = null, $customer_email = null, $effects_query = null, $attributes_query = null, $rule_query = null, $campaign_query = null)
    {
        // verify the required parameter 'application_id' is set
        if ($application_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_id when calling getApplicationEvents'
            );
        }
        if ($customer_name !== null && strlen($customer_name) < 2) {
            throw new \InvalidArgumentException('invalid length for "$customer_name" when calling CustomerDataApi.getApplicationEvents, must be bigger than or equal to 2.');
        }

        if ($customer_email !== null && strlen($customer_email) < 2) {
            throw new \InvalidArgumentException('invalid length for "$customer_email" when calling CustomerDataApi.getApplicationEvents, must be bigger than or equal to 2.');
        }


        $resourcePath = '/v1/applications/{applicationId}/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($created_before !== null) {
            $queryParams['createdBefore'] = ObjectSerializer::toQueryValue($created_before);
        }
        // query params
        if ($created_after !== null) {
            $queryParams['createdAfter'] = ObjectSerializer::toQueryValue($created_after);
        }
        // query params
        if ($session !== null) {
            $queryParams['session'] = ObjectSerializer::toQueryValue($session);
        }
        // query params
        if ($profile !== null) {
            $queryParams['profile'] = ObjectSerializer::toQueryValue($profile);
        }
        // query params
        if ($customer_name !== null) {
            $queryParams['customerName'] = ObjectSerializer::toQueryValue($customer_name);
        }
        // query params
        if ($customer_email !== null) {
            $queryParams['customerEmail'] = ObjectSerializer::toQueryValue($customer_email);
        }
        // query params
        if ($effects_query !== null) {
            $queryParams['effectsQuery'] = ObjectSerializer::toQueryValue($effects_query);
        }
        // query params
        if ($attributes_query !== null) {
            $queryParams['attributesQuery'] = ObjectSerializer::toQueryValue($attributes_query);
        }
        // query params
        if ($rule_query !== null) {
            $queryParams['ruleQuery'] = ObjectSerializer::toQueryValue($rule_query);
        }
        // query params
        if ($campaign_query !== null) {
            $queryParams['campaignQuery'] = ObjectSerializer::toQueryValue($campaign_query);
        }

        // path params
        if ($application_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationId' . '}',
                ObjectSerializer::toPathValue($application_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationSession
     *
     * Get Application Session
     *
     * @param  int $application_id  (required)
     * @param  int $session_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ApplicationSession
     */
    public function getApplicationSession($application_id, $session_id)
    {
        list($response) = $this->getApplicationSessionWithHttpInfo($application_id, $session_id);
        return $response;
    }

    /**
     * Operation getApplicationSessionWithHttpInfo
     *
     * Get Application Session
     *
     * @param  int $application_id  (required)
     * @param  int $session_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ApplicationSession, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationSessionWithHttpInfo($application_id, $session_id)
    {
        $returnType = '\Swagger\Client\Model\ApplicationSession';
        $request = $this->getApplicationSessionRequest($application_id, $session_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApplicationSession',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationSessionAsync
     *
     * Get Application Session
     *
     * @param  int $application_id  (required)
     * @param  int $session_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationSessionAsync($application_id, $session_id)
    {
        return $this->getApplicationSessionAsyncWithHttpInfo($application_id, $session_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationSessionAsyncWithHttpInfo
     *
     * Get Application Session
     *
     * @param  int $application_id  (required)
     * @param  int $session_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationSessionAsyncWithHttpInfo($application_id, $session_id)
    {
        $returnType = '\Swagger\Client\Model\ApplicationSession';
        $request = $this->getApplicationSessionRequest($application_id, $session_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationSession'
     *
     * @param  int $application_id  (required)
     * @param  int $session_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getApplicationSessionRequest($application_id, $session_id)
    {
        // verify the required parameter 'application_id' is set
        if ($application_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_id when calling getApplicationSession'
            );
        }
        // verify the required parameter 'session_id' is set
        if ($session_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling getApplicationSession'
            );
        }

        $resourcePath = '/v1/applications/{applicationId}/sessions/{sessionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($application_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationId' . '}',
                ObjectSerializer::toPathValue($application_id),
                $resourcePath
            );
        }
        // path params
        if ($session_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sessionId' . '}',
                ObjectSerializer::toPathValue($session_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationSessions
     *
     * List Application Sessions
     *
     * @param  int $application_id  (required)
     * @param  int $page_size The number of items to include in this response. (optional)
     * @param  int $skip Skips the given number of items when paging through large result sets. (optional)
     * @param  string $sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param  string $profile Profile integration ID filter for sessions. Must be exact match. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20017
     */
    public function getApplicationSessions($application_id, $page_size = null, $skip = null, $sort = null, $profile = null)
    {
        list($response) = $this->getApplicationSessionsWithHttpInfo($application_id, $page_size, $skip, $sort, $profile);
        return $response;
    }

    /**
     * Operation getApplicationSessionsWithHttpInfo
     *
     * List Application Sessions
     *
     * @param  int $application_id  (required)
     * @param  int $page_size The number of items to include in this response. (optional)
     * @param  int $skip Skips the given number of items when paging through large result sets. (optional)
     * @param  string $sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param  string $profile Profile integration ID filter for sessions. Must be exact match. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20017, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationSessionsWithHttpInfo($application_id, $page_size = null, $skip = null, $sort = null, $profile = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20017';
        $request = $this->getApplicationSessionsRequest($application_id, $page_size, $skip, $sort, $profile);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20017',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApplicationSessionsAsync
     *
     * List Application Sessions
     *
     * @param  int $application_id  (required)
     * @param  int $page_size The number of items to include in this response. (optional)
     * @param  int $skip Skips the given number of items when paging through large result sets. (optional)
     * @param  string $sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param  string $profile Profile integration ID filter for sessions. Must be exact match. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationSessionsAsync($application_id, $page_size = null, $skip = null, $sort = null, $profile = null)
    {
        return $this->getApplicationSessionsAsyncWithHttpInfo($application_id, $page_size, $skip, $sort, $profile)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationSessionsAsyncWithHttpInfo
     *
     * List Application Sessions
     *
     * @param  int $application_id  (required)
     * @param  int $page_size The number of items to include in this response. (optional)
     * @param  int $skip Skips the given number of items when paging through large result sets. (optional)
     * @param  string $sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param  string $profile Profile integration ID filter for sessions. Must be exact match. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationSessionsAsyncWithHttpInfo($application_id, $page_size = null, $skip = null, $sort = null, $profile = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20017';
        $request = $this->getApplicationSessionsRequest($application_id, $page_size, $skip, $sort, $profile);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationSessions'
     *
     * @param  int $application_id  (required)
     * @param  int $page_size The number of items to include in this response. (optional)
     * @param  int $skip Skips the given number of items when paging through large result sets. (optional)
     * @param  string $sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param  string $profile Profile integration ID filter for sessions. Must be exact match. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getApplicationSessionsRequest($application_id, $page_size = null, $skip = null, $sort = null, $profile = null)
    {
        // verify the required parameter 'application_id' is set
        if ($application_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_id when calling getApplicationSessions'
            );
        }

        $resourcePath = '/v1/applications/{applicationId}/sessions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($profile !== null) {
            $queryParams['profile'] = ObjectSerializer::toQueryValue($profile);
        }

        // path params
        if ($application_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationId' . '}',
                ObjectSerializer::toPathValue($application_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomerActivityReport
     *
     * Get Activity Report for Single Customer
     *
     * @param  \DateTime $range_start Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param  \DateTime $range_end Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param  int $application_id  (required)
     * @param  int $customer_id  (required)
     * @param  int $page_size The number of items to include in this response. (optional)
     * @param  int $skip Skips the given number of items when paging through large result sets. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CustomerActivityReport
     */
    public function getCustomerActivityReport($range_start, $range_end, $application_id, $customer_id, $page_size = null, $skip = null)
    {
        list($response) = $this->getCustomerActivityReportWithHttpInfo($range_start, $range_end, $application_id, $customer_id, $page_size, $skip);
        return $response;
    }

    /**
     * Operation getCustomerActivityReportWithHttpInfo
     *
     * Get Activity Report for Single Customer
     *
     * @param  \DateTime $range_start Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param  \DateTime $range_end Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param  int $application_id  (required)
     * @param  int $customer_id  (required)
     * @param  int $page_size The number of items to include in this response. (optional)
     * @param  int $skip Skips the given number of items when paging through large result sets. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CustomerActivityReport, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerActivityReportWithHttpInfo($range_start, $range_end, $application_id, $customer_id, $page_size = null, $skip = null)
    {
        $returnType = '\Swagger\Client\Model\CustomerActivityReport';
        $request = $this->getCustomerActivityReportRequest($range_start, $range_end, $application_id, $customer_id, $page_size, $skip);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CustomerActivityReport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerActivityReportAsync
     *
     * Get Activity Report for Single Customer
     *
     * @param  \DateTime $range_start Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param  \DateTime $range_end Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param  int $application_id  (required)
     * @param  int $customer_id  (required)
     * @param  int $page_size The number of items to include in this response. (optional)
     * @param  int $skip Skips the given number of items when paging through large result sets. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerActivityReportAsync($range_start, $range_end, $application_id, $customer_id, $page_size = null, $skip = null)
    {
        return $this->getCustomerActivityReportAsyncWithHttpInfo($range_start, $range_end, $application_id, $customer_id, $page_size, $skip)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerActivityReportAsyncWithHttpInfo
     *
     * Get Activity Report for Single Customer
     *
     * @param  \DateTime $range_start Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param  \DateTime $range_end Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param  int $application_id  (required)
     * @param  int $customer_id  (required)
     * @param  int $page_size The number of items to include in this response. (optional)
     * @param  int $skip Skips the given number of items when paging through large result sets. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerActivityReportAsyncWithHttpInfo($range_start, $range_end, $application_id, $customer_id, $page_size = null, $skip = null)
    {
        $returnType = '\Swagger\Client\Model\CustomerActivityReport';
        $request = $this->getCustomerActivityReportRequest($range_start, $range_end, $application_id, $customer_id, $page_size, $skip);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerActivityReport'
     *
     * @param  \DateTime $range_start Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param  \DateTime $range_end Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param  int $application_id  (required)
     * @param  int $customer_id  (required)
     * @param  int $page_size The number of items to include in this response. (optional)
     * @param  int $skip Skips the given number of items when paging through large result sets. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCustomerActivityReportRequest($range_start, $range_end, $application_id, $customer_id, $page_size = null, $skip = null)
    {
        // verify the required parameter 'range_start' is set
        if ($range_start === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $range_start when calling getCustomerActivityReport'
            );
        }
        // verify the required parameter 'range_end' is set
        if ($range_end === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $range_end when calling getCustomerActivityReport'
            );
        }
        // verify the required parameter 'application_id' is set
        if ($application_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_id when calling getCustomerActivityReport'
            );
        }
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling getCustomerActivityReport'
            );
        }

        $resourcePath = '/v1/applications/{applicationId}/customer_activity_reports/{customerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($range_start !== null) {
            $queryParams['rangeStart'] = ObjectSerializer::toQueryValue($range_start);
        }
        // query params
        if ($range_end !== null) {
            $queryParams['rangeEnd'] = ObjectSerializer::toQueryValue($range_end);
        }

        // path params
        if ($application_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationId' . '}',
                ObjectSerializer::toPathValue($application_id),
                $resourcePath
            );
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerId' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomerActivityReports
     *
     * Get Activity Reports for Application Customers
     *
     * @param  \DateTime $range_start Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param  \DateTime $range_end Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param  int $application_id  (required)
     * @param  int $page_size The number of items to include in this response. (optional)
     * @param  int $skip Skips the given number of items when paging through large result sets. (optional)
     * @param  string $sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param  string $name Only return reports matching the customer name (optional)
     * @param  string $integration_id Only return reports matching the integrationId (optional)
     * @param  string $campaign_name Only return reports matching the campaignName (optional)
     * @param  string $advocate_name Only return reports matching the current customer referrer name (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20016
     */
    public function getCustomerActivityReports($range_start, $range_end, $application_id, $page_size = null, $skip = null, $sort = null, $name = null, $integration_id = null, $campaign_name = null, $advocate_name = null)
    {
        list($response) = $this->getCustomerActivityReportsWithHttpInfo($range_start, $range_end, $application_id, $page_size, $skip, $sort, $name, $integration_id, $campaign_name, $advocate_name);
        return $response;
    }

    /**
     * Operation getCustomerActivityReportsWithHttpInfo
     *
     * Get Activity Reports for Application Customers
     *
     * @param  \DateTime $range_start Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param  \DateTime $range_end Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param  int $application_id  (required)
     * @param  int $page_size The number of items to include in this response. (optional)
     * @param  int $skip Skips the given number of items when paging through large result sets. (optional)
     * @param  string $sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param  string $name Only return reports matching the customer name (optional)
     * @param  string $integration_id Only return reports matching the integrationId (optional)
     * @param  string $campaign_name Only return reports matching the campaignName (optional)
     * @param  string $advocate_name Only return reports matching the current customer referrer name (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20016, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerActivityReportsWithHttpInfo($range_start, $range_end, $application_id, $page_size = null, $skip = null, $sort = null, $name = null, $integration_id = null, $campaign_name = null, $advocate_name = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20016';
        $request = $this->getCustomerActivityReportsRequest($range_start, $range_end, $application_id, $page_size, $skip, $sort, $name, $integration_id, $campaign_name, $advocate_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20016',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerActivityReportsAsync
     *
     * Get Activity Reports for Application Customers
     *
     * @param  \DateTime $range_start Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param  \DateTime $range_end Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param  int $application_id  (required)
     * @param  int $page_size The number of items to include in this response. (optional)
     * @param  int $skip Skips the given number of items when paging through large result sets. (optional)
     * @param  string $sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param  string $name Only return reports matching the customer name (optional)
     * @param  string $integration_id Only return reports matching the integrationId (optional)
     * @param  string $campaign_name Only return reports matching the campaignName (optional)
     * @param  string $advocate_name Only return reports matching the current customer referrer name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerActivityReportsAsync($range_start, $range_end, $application_id, $page_size = null, $skip = null, $sort = null, $name = null, $integration_id = null, $campaign_name = null, $advocate_name = null)
    {
        return $this->getCustomerActivityReportsAsyncWithHttpInfo($range_start, $range_end, $application_id, $page_size, $skip, $sort, $name, $integration_id, $campaign_name, $advocate_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerActivityReportsAsyncWithHttpInfo
     *
     * Get Activity Reports for Application Customers
     *
     * @param  \DateTime $range_start Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param  \DateTime $range_end Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param  int $application_id  (required)
     * @param  int $page_size The number of items to include in this response. (optional)
     * @param  int $skip Skips the given number of items when paging through large result sets. (optional)
     * @param  string $sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param  string $name Only return reports matching the customer name (optional)
     * @param  string $integration_id Only return reports matching the integrationId (optional)
     * @param  string $campaign_name Only return reports matching the campaignName (optional)
     * @param  string $advocate_name Only return reports matching the current customer referrer name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerActivityReportsAsyncWithHttpInfo($range_start, $range_end, $application_id, $page_size = null, $skip = null, $sort = null, $name = null, $integration_id = null, $campaign_name = null, $advocate_name = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20016';
        $request = $this->getCustomerActivityReportsRequest($range_start, $range_end, $application_id, $page_size, $skip, $sort, $name, $integration_id, $campaign_name, $advocate_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerActivityReports'
     *
     * @param  \DateTime $range_start Only return results from after this timestamp, must be an RFC3339 timestamp string (required)
     * @param  \DateTime $range_end Only return results from before this timestamp, must be an RFC3339 timestamp string (required)
     * @param  int $application_id  (required)
     * @param  int $page_size The number of items to include in this response. (optional)
     * @param  int $skip Skips the given number of items when paging through large result sets. (optional)
     * @param  string $sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order. (optional)
     * @param  string $name Only return reports matching the customer name (optional)
     * @param  string $integration_id Only return reports matching the integrationId (optional)
     * @param  string $campaign_name Only return reports matching the campaignName (optional)
     * @param  string $advocate_name Only return reports matching the current customer referrer name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCustomerActivityReportsRequest($range_start, $range_end, $application_id, $page_size = null, $skip = null, $sort = null, $name = null, $integration_id = null, $campaign_name = null, $advocate_name = null)
    {
        // verify the required parameter 'range_start' is set
        if ($range_start === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $range_start when calling getCustomerActivityReports'
            );
        }
        // verify the required parameter 'range_end' is set
        if ($range_end === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $range_end when calling getCustomerActivityReports'
            );
        }
        // verify the required parameter 'application_id' is set
        if ($application_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_id when calling getCustomerActivityReports'
            );
        }

        $resourcePath = '/v1/applications/{applicationId}/customer_activity_reports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($range_start !== null) {
            $queryParams['rangeStart'] = ObjectSerializer::toQueryValue($range_start);
        }
        // query params
        if ($range_end !== null) {
            $queryParams['rangeEnd'] = ObjectSerializer::toQueryValue($range_end);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($integration_id !== null) {
            $queryParams['integrationId'] = ObjectSerializer::toQueryValue($integration_id);
        }
        // query params
        if ($campaign_name !== null) {
            $queryParams['campaignName'] = ObjectSerializer::toQueryValue($campaign_name);
        }
        // query params
        if ($advocate_name !== null) {
            $queryParams['advocateName'] = ObjectSerializer::toQueryValue($advocate_name);
        }

        // path params
        if ($application_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationId' . '}',
                ObjectSerializer::toPathValue($application_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
