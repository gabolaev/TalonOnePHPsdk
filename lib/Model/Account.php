<?php
/**
 * Account
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Account Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Account implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Account';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'created' => '\DateTime',
        'modified' => '\DateTime',
        'company_name' => 'string',
        'domain_name' => 'string',
        'state' => 'string',
        'billing_email' => 'string',
        'plan_name' => 'string',
        'plan_expires' => '\DateTime',
        'application_limit' => 'int',
        'user_limit' => 'int',
        'campaign_limit' => 'int',
        'api_limit' => 'int',
        'application_count' => 'int',
        'user_count' => 'int',
        'campaigns_active_count' => 'int',
        'campaigns_inactive_count' => 'int',
        'api_call_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'created' => 'date-time',
        'modified' => 'date-time',
        'company_name' => null,
        'domain_name' => null,
        'state' => null,
        'billing_email' => 'email',
        'plan_name' => null,
        'plan_expires' => 'date-time',
        'application_limit' => null,
        'user_limit' => null,
        'campaign_limit' => null,
        'api_limit' => null,
        'application_count' => null,
        'user_count' => null,
        'campaigns_active_count' => null,
        'campaigns_inactive_count' => null,
        'api_call_count' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created' => 'created',
        'modified' => 'modified',
        'company_name' => 'companyName',
        'domain_name' => 'domainName',
        'state' => 'state',
        'billing_email' => 'billingEmail',
        'plan_name' => 'planName',
        'plan_expires' => 'planExpires',
        'application_limit' => 'applicationLimit',
        'user_limit' => 'userLimit',
        'campaign_limit' => 'campaignLimit',
        'api_limit' => 'apiLimit',
        'application_count' => 'applicationCount',
        'user_count' => 'userCount',
        'campaigns_active_count' => 'campaignsActiveCount',
        'campaigns_inactive_count' => 'campaignsInactiveCount',
        'api_call_count' => 'apiCallCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created' => 'setCreated',
        'modified' => 'setModified',
        'company_name' => 'setCompanyName',
        'domain_name' => 'setDomainName',
        'state' => 'setState',
        'billing_email' => 'setBillingEmail',
        'plan_name' => 'setPlanName',
        'plan_expires' => 'setPlanExpires',
        'application_limit' => 'setApplicationLimit',
        'user_limit' => 'setUserLimit',
        'campaign_limit' => 'setCampaignLimit',
        'api_limit' => 'setApiLimit',
        'application_count' => 'setApplicationCount',
        'user_count' => 'setUserCount',
        'campaigns_active_count' => 'setCampaignsActiveCount',
        'campaigns_inactive_count' => 'setCampaignsInactiveCount',
        'api_call_count' => 'setApiCallCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created' => 'getCreated',
        'modified' => 'getModified',
        'company_name' => 'getCompanyName',
        'domain_name' => 'getDomainName',
        'state' => 'getState',
        'billing_email' => 'getBillingEmail',
        'plan_name' => 'getPlanName',
        'plan_expires' => 'getPlanExpires',
        'application_limit' => 'getApplicationLimit',
        'user_limit' => 'getUserLimit',
        'campaign_limit' => 'getCampaignLimit',
        'api_limit' => 'getApiLimit',
        'application_count' => 'getApplicationCount',
        'user_count' => 'getUserCount',
        'campaigns_active_count' => 'getCampaignsActiveCount',
        'campaigns_inactive_count' => 'getCampaignsInactiveCount',
        'api_call_count' => 'getApiCallCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_TRIAL = 'trial';
    const STATE_ACTIVE = 'active';
    const STATE_TRIAL_EXPIRED = 'trial_expired';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_TRIAL,
            self::STATE_ACTIVE,
            self::STATE_TRIAL_EXPIRED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['domain_name'] = isset($data['domain_name']) ? $data['domain_name'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['billing_email'] = isset($data['billing_email']) ? $data['billing_email'] : null;
        $this->container['plan_name'] = isset($data['plan_name']) ? $data['plan_name'] : null;
        $this->container['plan_expires'] = isset($data['plan_expires']) ? $data['plan_expires'] : null;
        $this->container['application_limit'] = isset($data['application_limit']) ? $data['application_limit'] : null;
        $this->container['user_limit'] = isset($data['user_limit']) ? $data['user_limit'] : null;
        $this->container['campaign_limit'] = isset($data['campaign_limit']) ? $data['campaign_limit'] : null;
        $this->container['api_limit'] = isset($data['api_limit']) ? $data['api_limit'] : null;
        $this->container['application_count'] = isset($data['application_count']) ? $data['application_count'] : null;
        $this->container['user_count'] = isset($data['user_count']) ? $data['user_count'] : null;
        $this->container['campaigns_active_count'] = isset($data['campaigns_active_count']) ? $data['campaigns_active_count'] : null;
        $this->container['campaigns_inactive_count'] = isset($data['campaigns_inactive_count']) ? $data['campaigns_inactive_count'] : null;
        $this->container['api_call_count'] = isset($data['api_call_count']) ? $data['api_call_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['modified'] === null) {
            $invalidProperties[] = "'modified' can't be null";
        }
        if ($this->container['company_name'] === null) {
            $invalidProperties[] = "'company_name' can't be null";
        }
        if ((strlen($this->container['company_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'company_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['domain_name'] === null) {
            $invalidProperties[] = "'domain_name' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($this->container['state'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['billing_email'] === null) {
            $invalidProperties[] = "'billing_email' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['created'] === null) {
            return false;
        }
        if ($this->container['modified'] === null) {
            return false;
        }
        if ($this->container['company_name'] === null) {
            return false;
        }
        if (strlen($this->container['company_name']) < 1) {
            return false;
        }
        if ($this->container['domain_name'] === null) {
            return false;
        }
        if ($this->container['state'] === null) {
            return false;
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($this->container['state'], $allowedValues)) {
            return false;
        }
        if ($this->container['billing_email'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique ID for this entity.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The exact moment this entity was created.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime $modified The exact moment this entity was last modified.
     *
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name company_name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {

        if ((strlen($company_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $company_name when calling Account., must be bigger than or equal to 1.');
        }

        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets domain_name
     *
     * @return string
     */
    public function getDomainName()
    {
        return $this->container['domain_name'];
    }

    /**
     * Sets domain_name
     *
     * @param string $domain_name Subdomain Name for yourcompany.talon.one
     *
     * @return $this
     */
    public function setDomainName($domain_name)
    {
        $this->container['domain_name'] = $domain_name;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State of the account (trial, active, trial_expired)
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets billing_email
     *
     * @return string
     */
    public function getBillingEmail()
    {
        return $this->container['billing_email'];
    }

    /**
     * Sets billing_email
     *
     * @param string $billing_email The billing email address associated with your company account.
     *
     * @return $this
     */
    public function setBillingEmail($billing_email)
    {
        $this->container['billing_email'] = $billing_email;

        return $this;
    }

    /**
     * Gets plan_name
     *
     * @return string
     */
    public function getPlanName()
    {
        return $this->container['plan_name'];
    }

    /**
     * Sets plan_name
     *
     * @param string $plan_name The name of your booked plan.
     *
     * @return $this
     */
    public function setPlanName($plan_name)
    {
        $this->container['plan_name'] = $plan_name;

        return $this;
    }

    /**
     * Gets plan_expires
     *
     * @return \DateTime
     */
    public function getPlanExpires()
    {
        return $this->container['plan_expires'];
    }

    /**
     * Sets plan_expires
     *
     * @param \DateTime $plan_expires The point in time at which your current plan expires.
     *
     * @return $this
     */
    public function setPlanExpires($plan_expires)
    {
        $this->container['plan_expires'] = $plan_expires;

        return $this;
    }

    /**
     * Gets application_limit
     *
     * @return int
     */
    public function getApplicationLimit()
    {
        return $this->container['application_limit'];
    }

    /**
     * Sets application_limit
     *
     * @param int $application_limit The maximum number of Applications covered by your plan.
     *
     * @return $this
     */
    public function setApplicationLimit($application_limit)
    {
        $this->container['application_limit'] = $application_limit;

        return $this;
    }

    /**
     * Gets user_limit
     *
     * @return int
     */
    public function getUserLimit()
    {
        return $this->container['user_limit'];
    }

    /**
     * Sets user_limit
     *
     * @param int $user_limit The maximum number of Campaign Manager Users covered by your plan.
     *
     * @return $this
     */
    public function setUserLimit($user_limit)
    {
        $this->container['user_limit'] = $user_limit;

        return $this;
    }

    /**
     * Gets campaign_limit
     *
     * @return int
     */
    public function getCampaignLimit()
    {
        return $this->container['campaign_limit'];
    }

    /**
     * Sets campaign_limit
     *
     * @param int $campaign_limit The maximum number of Campaigns covered by your plan.
     *
     * @return $this
     */
    public function setCampaignLimit($campaign_limit)
    {
        $this->container['campaign_limit'] = $campaign_limit;

        return $this;
    }

    /**
     * Gets api_limit
     *
     * @return int
     */
    public function getApiLimit()
    {
        return $this->container['api_limit'];
    }

    /**
     * Sets api_limit
     *
     * @param int $api_limit The maximum number of Integration API calls covered by your plan per billing period.
     *
     * @return $this
     */
    public function setApiLimit($api_limit)
    {
        $this->container['api_limit'] = $api_limit;

        return $this;
    }

    /**
     * Gets application_count
     *
     * @return int
     */
    public function getApplicationCount()
    {
        return $this->container['application_count'];
    }

    /**
     * Sets application_count
     *
     * @param int $application_count The current number of Applications in your account.
     *
     * @return $this
     */
    public function setApplicationCount($application_count)
    {
        $this->container['application_count'] = $application_count;

        return $this;
    }

    /**
     * Gets user_count
     *
     * @return int
     */
    public function getUserCount()
    {
        return $this->container['user_count'];
    }

    /**
     * Sets user_count
     *
     * @param int $user_count The current number of Campaign Manager Users in your account.
     *
     * @return $this
     */
    public function setUserCount($user_count)
    {
        $this->container['user_count'] = $user_count;

        return $this;
    }

    /**
     * Gets campaigns_active_count
     *
     * @return int
     */
    public function getCampaignsActiveCount()
    {
        return $this->container['campaigns_active_count'];
    }

    /**
     * Sets campaigns_active_count
     *
     * @param int $campaigns_active_count The current number of active Campaigns in your account.
     *
     * @return $this
     */
    public function setCampaignsActiveCount($campaigns_active_count)
    {
        $this->container['campaigns_active_count'] = $campaigns_active_count;

        return $this;
    }

    /**
     * Gets campaigns_inactive_count
     *
     * @return int
     */
    public function getCampaignsInactiveCount()
    {
        return $this->container['campaigns_inactive_count'];
    }

    /**
     * Sets campaigns_inactive_count
     *
     * @param int $campaigns_inactive_count The current number of inactive Campaigns in your account.
     *
     * @return $this
     */
    public function setCampaignsInactiveCount($campaigns_inactive_count)
    {
        $this->container['campaigns_inactive_count'] = $campaigns_inactive_count;

        return $this;
    }

    /**
     * Gets api_call_count
     *
     * @return int
     */
    public function getApiCallCount()
    {
        return $this->container['api_call_count'];
    }

    /**
     * Sets api_call_count
     *
     * @param int $api_call_count The number of Integration API calls that have been made.
     *
     * @return $this
     */
    public function setApiCallCount($api_call_count)
    {
        $this->container['api_call_count'] = $api_call_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


