<?php
/**
 * CampaignAnalytics
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CampaignAnalytics Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CampaignAnalytics implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CampaignAnalytics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'created' => '\DateTime',
        'campaign_id' => 'int',
        'coupon_revenue' => 'float',
        'coupon_discount_costs' => 'float',
        'coupons_count' => 'int',
        'coupon_redemptions' => 'int',
        'campaign_redemption_limit' => 'int',
        'coupon_redemption_limit' => 'int',
        'coupon_redemptions_remaining' => 'int',
        'campaign_redemptions_remaining' => 'int',
        'revenue_per_redemption' => 'float',
        'unlimited_coupons' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'created' => 'date-time',
        'campaign_id' => null,
        'coupon_revenue' => null,
        'coupon_discount_costs' => null,
        'coupons_count' => null,
        'coupon_redemptions' => null,
        'campaign_redemption_limit' => null,
        'coupon_redemption_limit' => null,
        'coupon_redemptions_remaining' => null,
        'campaign_redemptions_remaining' => null,
        'revenue_per_redemption' => null,
        'unlimited_coupons' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created' => 'created',
        'campaign_id' => 'campaignId',
        'coupon_revenue' => 'couponRevenue',
        'coupon_discount_costs' => 'couponDiscountCosts',
        'coupons_count' => 'couponsCount',
        'coupon_redemptions' => 'couponRedemptions',
        'campaign_redemption_limit' => 'campaignRedemptionLimit',
        'coupon_redemption_limit' => 'couponRedemptionLimit',
        'coupon_redemptions_remaining' => 'couponRedemptionsRemaining',
        'campaign_redemptions_remaining' => 'campaignRedemptionsRemaining',
        'revenue_per_redemption' => 'revenuePerRedemption',
        'unlimited_coupons' => 'unlimitedCoupons'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created' => 'setCreated',
        'campaign_id' => 'setCampaignId',
        'coupon_revenue' => 'setCouponRevenue',
        'coupon_discount_costs' => 'setCouponDiscountCosts',
        'coupons_count' => 'setCouponsCount',
        'coupon_redemptions' => 'setCouponRedemptions',
        'campaign_redemption_limit' => 'setCampaignRedemptionLimit',
        'coupon_redemption_limit' => 'setCouponRedemptionLimit',
        'coupon_redemptions_remaining' => 'setCouponRedemptionsRemaining',
        'campaign_redemptions_remaining' => 'setCampaignRedemptionsRemaining',
        'revenue_per_redemption' => 'setRevenuePerRedemption',
        'unlimited_coupons' => 'setUnlimitedCoupons'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created' => 'getCreated',
        'campaign_id' => 'getCampaignId',
        'coupon_revenue' => 'getCouponRevenue',
        'coupon_discount_costs' => 'getCouponDiscountCosts',
        'coupons_count' => 'getCouponsCount',
        'coupon_redemptions' => 'getCouponRedemptions',
        'campaign_redemption_limit' => 'getCampaignRedemptionLimit',
        'coupon_redemption_limit' => 'getCouponRedemptionLimit',
        'coupon_redemptions_remaining' => 'getCouponRedemptionsRemaining',
        'campaign_redemptions_remaining' => 'getCampaignRedemptionsRemaining',
        'revenue_per_redemption' => 'getRevenuePerRedemption',
        'unlimited_coupons' => 'getUnlimitedCoupons'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['campaign_id'] = isset($data['campaign_id']) ? $data['campaign_id'] : null;
        $this->container['coupon_revenue'] = isset($data['coupon_revenue']) ? $data['coupon_revenue'] : null;
        $this->container['coupon_discount_costs'] = isset($data['coupon_discount_costs']) ? $data['coupon_discount_costs'] : null;
        $this->container['coupons_count'] = isset($data['coupons_count']) ? $data['coupons_count'] : null;
        $this->container['coupon_redemptions'] = isset($data['coupon_redemptions']) ? $data['coupon_redemptions'] : null;
        $this->container['campaign_redemption_limit'] = isset($data['campaign_redemption_limit']) ? $data['campaign_redemption_limit'] : null;
        $this->container['coupon_redemption_limit'] = isset($data['coupon_redemption_limit']) ? $data['coupon_redemption_limit'] : null;
        $this->container['coupon_redemptions_remaining'] = isset($data['coupon_redemptions_remaining']) ? $data['coupon_redemptions_remaining'] : null;
        $this->container['campaign_redemptions_remaining'] = isset($data['campaign_redemptions_remaining']) ? $data['campaign_redemptions_remaining'] : null;
        $this->container['revenue_per_redemption'] = isset($data['revenue_per_redemption']) ? $data['revenue_per_redemption'] : null;
        $this->container['unlimited_coupons'] = isset($data['unlimited_coupons']) ? $data['unlimited_coupons'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['campaign_id'] === null) {
            $invalidProperties[] = "'campaign_id' can't be null";
        }
        if ($this->container['coupon_revenue'] === null) {
            $invalidProperties[] = "'coupon_revenue' can't be null";
        }
        if ($this->container['coupon_discount_costs'] === null) {
            $invalidProperties[] = "'coupon_discount_costs' can't be null";
        }
        if ($this->container['coupons_count'] === null) {
            $invalidProperties[] = "'coupons_count' can't be null";
        }
        if ($this->container['coupon_redemptions'] === null) {
            $invalidProperties[] = "'coupon_redemptions' can't be null";
        }
        if ($this->container['campaign_redemption_limit'] === null) {
            $invalidProperties[] = "'campaign_redemption_limit' can't be null";
        }
        if ($this->container['coupon_redemption_limit'] === null) {
            $invalidProperties[] = "'coupon_redemption_limit' can't be null";
        }
        if ($this->container['coupon_redemptions_remaining'] === null) {
            $invalidProperties[] = "'coupon_redemptions_remaining' can't be null";
        }
        if ($this->container['campaign_redemptions_remaining'] === null) {
            $invalidProperties[] = "'campaign_redemptions_remaining' can't be null";
        }
        if ($this->container['revenue_per_redemption'] === null) {
            $invalidProperties[] = "'revenue_per_redemption' can't be null";
        }
        if ($this->container['unlimited_coupons'] === null) {
            $invalidProperties[] = "'unlimited_coupons' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['created'] === null) {
            return false;
        }
        if ($this->container['campaign_id'] === null) {
            return false;
        }
        if ($this->container['coupon_revenue'] === null) {
            return false;
        }
        if ($this->container['coupon_discount_costs'] === null) {
            return false;
        }
        if ($this->container['coupons_count'] === null) {
            return false;
        }
        if ($this->container['coupon_redemptions'] === null) {
            return false;
        }
        if ($this->container['campaign_redemption_limit'] === null) {
            return false;
        }
        if ($this->container['coupon_redemption_limit'] === null) {
            return false;
        }
        if ($this->container['coupon_redemptions_remaining'] === null) {
            return false;
        }
        if ($this->container['campaign_redemptions_remaining'] === null) {
            return false;
        }
        if ($this->container['revenue_per_redemption'] === null) {
            return false;
        }
        if ($this->container['unlimited_coupons'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique ID for this entity.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The exact moment this entity was created.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets campaign_id
     *
     * @return int
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     *
     * @param int $campaign_id The ID of the campaign that owns this entity.
     *
     * @return $this
     */
    public function setCampaignId($campaign_id)
    {
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets coupon_revenue
     *
     * @return float
     */
    public function getCouponRevenue()
    {
        return $this->container['coupon_revenue'];
    }

    /**
     * Sets coupon_revenue
     *
     * @param float $coupon_revenue Amount of revenue from campaign with coupons.
     *
     * @return $this
     */
    public function setCouponRevenue($coupon_revenue)
    {
        $this->container['coupon_revenue'] = $coupon_revenue;

        return $this;
    }

    /**
     * Gets coupon_discount_costs
     *
     * @return float
     */
    public function getCouponDiscountCosts()
    {
        return $this->container['coupon_discount_costs'];
    }

    /**
     * Sets coupon_discount_costs
     *
     * @param float $coupon_discount_costs Amount of cost caused by discounts given in the campaign with sessions involving coupons.
     *
     * @return $this
     */
    public function setCouponDiscountCosts($coupon_discount_costs)
    {
        $this->container['coupon_discount_costs'] = $coupon_discount_costs;

        return $this;
    }

    /**
     * Gets coupons_count
     *
     * @return int
     */
    public function getCouponsCount()
    {
        return $this->container['coupons_count'];
    }

    /**
     * Sets coupons_count
     *
     * @param int $coupons_count Number of coupons in the campaign.
     *
     * @return $this
     */
    public function setCouponsCount($coupons_count)
    {
        $this->container['coupons_count'] = $coupons_count;

        return $this;
    }

    /**
     * Gets coupon_redemptions
     *
     * @return int
     */
    public function getCouponRedemptions()
    {
        return $this->container['coupon_redemptions'];
    }

    /**
     * Sets coupon_redemptions
     *
     * @param int $coupon_redemptions Number of redemptions in the campaign.
     *
     * @return $this
     */
    public function setCouponRedemptions($coupon_redemptions)
    {
        $this->container['coupon_redemptions'] = $coupon_redemptions;

        return $this;
    }

    /**
     * Gets campaign_redemption_limit
     *
     * @return int
     */
    public function getCampaignRedemptionLimit()
    {
        return $this->container['campaign_redemption_limit'];
    }

    /**
     * Sets campaign_redemption_limit
     *
     * @param int $campaign_redemption_limit Limit on overall redemptions in the campaign.
     *
     * @return $this
     */
    public function setCampaignRedemptionLimit($campaign_redemption_limit)
    {
        $this->container['campaign_redemption_limit'] = $campaign_redemption_limit;

        return $this;
    }

    /**
     * Gets coupon_redemption_limit
     *
     * @return int
     */
    public function getCouponRedemptionLimit()
    {
        return $this->container['coupon_redemption_limit'];
    }

    /**
     * Sets coupon_redemption_limit
     *
     * @param int $coupon_redemption_limit Possible redemptions calculated over all coupons.
     *
     * @return $this
     */
    public function setCouponRedemptionLimit($coupon_redemption_limit)
    {
        $this->container['coupon_redemption_limit'] = $coupon_redemption_limit;

        return $this;
    }

    /**
     * Gets coupon_redemptions_remaining
     *
     * @return int
     */
    public function getCouponRedemptionsRemaining()
    {
        return $this->container['coupon_redemptions_remaining'];
    }

    /**
     * Sets coupon_redemptions_remaining
     *
     * @param int $coupon_redemptions_remaining Number of redemptions remaining on the coupon level in the campaign.
     *
     * @return $this
     */
    public function setCouponRedemptionsRemaining($coupon_redemptions_remaining)
    {
        $this->container['coupon_redemptions_remaining'] = $coupon_redemptions_remaining;

        return $this;
    }

    /**
     * Gets campaign_redemptions_remaining
     *
     * @return int
     */
    public function getCampaignRedemptionsRemaining()
    {
        return $this->container['campaign_redemptions_remaining'];
    }

    /**
     * Sets campaign_redemptions_remaining
     *
     * @param int $campaign_redemptions_remaining Hard limit of redemptions remaining on the campaign level.
     *
     * @return $this
     */
    public function setCampaignRedemptionsRemaining($campaign_redemptions_remaining)
    {
        $this->container['campaign_redemptions_remaining'] = $campaign_redemptions_remaining;

        return $this;
    }

    /**
     * Gets revenue_per_redemption
     *
     * @return float
     */
    public function getRevenuePerRedemption()
    {
        return $this->container['revenue_per_redemption'];
    }

    /**
     * Sets revenue_per_redemption
     *
     * @param float $revenue_per_redemption Composite to describe coupon performance.
     *
     * @return $this
     */
    public function setRevenuePerRedemption($revenue_per_redemption)
    {
        $this->container['revenue_per_redemption'] = $revenue_per_redemption;

        return $this;
    }

    /**
     * Gets unlimited_coupons
     *
     * @return int
     */
    public function getUnlimitedCoupons()
    {
        return $this->container['unlimited_coupons'];
    }

    /**
     * Sets unlimited_coupons
     *
     * @param int $unlimited_coupons Number of unlimited coupons in the campaign.
     *
     * @return $this
     */
    public function setUnlimitedCoupons($unlimited_coupons)
    {
        $this->container['unlimited_coupons'] = $unlimited_coupons;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


