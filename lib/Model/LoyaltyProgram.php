<?php
/**
 * LoyaltyProgram
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LoyaltyProgram Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LoyaltyProgram implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LoyaltyProgram';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'created' => '\DateTime',
        'modified' => '\DateTime',
        'account_id' => 'int',
        'name' => 'string',
        'description' => 'string',
        'point_validity' => 'int',
        'spending_rate' => 'int',
        'allow_fallback' => 'bool',
        'allow_mixed_payment' => 'bool',
        'tiers' => '\Swagger\Client\Model\Tiers',
        'active_applications' => '\Swagger\Client\Model\LoyaltyProgramActivation[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'created' => 'date-time',
        'modified' => 'date-time',
        'account_id' => null,
        'name' => null,
        'description' => null,
        'point_validity' => null,
        'spending_rate' => null,
        'allow_fallback' => null,
        'allow_mixed_payment' => null,
        'tiers' => null,
        'active_applications' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created' => 'created',
        'modified' => 'modified',
        'account_id' => 'accountId',
        'name' => 'name',
        'description' => 'description',
        'point_validity' => 'pointValidity',
        'spending_rate' => 'spendingRate',
        'allow_fallback' => 'allowFallback',
        'allow_mixed_payment' => 'allowMixedPayment',
        'tiers' => 'tiers',
        'active_applications' => 'activeApplications'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created' => 'setCreated',
        'modified' => 'setModified',
        'account_id' => 'setAccountId',
        'name' => 'setName',
        'description' => 'setDescription',
        'point_validity' => 'setPointValidity',
        'spending_rate' => 'setSpendingRate',
        'allow_fallback' => 'setAllowFallback',
        'allow_mixed_payment' => 'setAllowMixedPayment',
        'tiers' => 'setTiers',
        'active_applications' => 'setActiveApplications'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created' => 'getCreated',
        'modified' => 'getModified',
        'account_id' => 'getAccountId',
        'name' => 'getName',
        'description' => 'getDescription',
        'point_validity' => 'getPointValidity',
        'spending_rate' => 'getSpendingRate',
        'allow_fallback' => 'getAllowFallback',
        'allow_mixed_payment' => 'getAllowMixedPayment',
        'tiers' => 'getTiers',
        'active_applications' => 'getActiveApplications'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['point_validity'] = isset($data['point_validity']) ? $data['point_validity'] : null;
        $this->container['spending_rate'] = isset($data['spending_rate']) ? $data['spending_rate'] : null;
        $this->container['allow_fallback'] = isset($data['allow_fallback']) ? $data['allow_fallback'] : null;
        $this->container['allow_mixed_payment'] = isset($data['allow_mixed_payment']) ? $data['allow_mixed_payment'] : null;
        $this->container['tiers'] = isset($data['tiers']) ? $data['tiers'] : null;
        $this->container['active_applications'] = isset($data['active_applications']) ? $data['active_applications'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['modified'] === null) {
            $invalidProperties[] = "'modified' can't be null";
        }
        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['point_validity'] === null) {
            $invalidProperties[] = "'point_validity' can't be null";
        }
        if (($this->container['point_validity'] < 1)) {
            $invalidProperties[] = "invalid value for 'point_validity', must be bigger than or equal to 1.";
        }

        if ($this->container['allow_fallback'] === null) {
            $invalidProperties[] = "'allow_fallback' can't be null";
        }
        if ($this->container['allow_mixed_payment'] === null) {
            $invalidProperties[] = "'allow_mixed_payment' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['created'] === null) {
            return false;
        }
        if ($this->container['modified'] === null) {
            return false;
        }
        if ($this->container['account_id'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if (strlen($this->container['name']) < 1) {
            return false;
        }
        if ($this->container['point_validity'] === null) {
            return false;
        }
        if ($this->container['point_validity'] < 1) {
            return false;
        }
        if ($this->container['allow_fallback'] === null) {
            return false;
        }
        if ($this->container['allow_mixed_payment'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique ID for this entity.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The exact moment this entity was created.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime $modified The exact moment this entity was last modified.
     *
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id The ID of the account that owns this entity.
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of this loyalty program
     *
     * @return $this
     */
    public function setName($name)
    {

        if ((strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling LoyaltyProgram., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A longer description of the loyalty program
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets point_validity
     *
     * @return int
     */
    public function getPointValidity()
    {
        return $this->container['point_validity'];
    }

    /**
     * Sets point_validity
     *
     * @param int $point_validity Validity of newly added points in months
     *
     * @return $this
     */
    public function setPointValidity($point_validity)
    {

        if (($point_validity < 1)) {
            throw new \InvalidArgumentException('invalid value for $point_validity when calling LoyaltyProgram., must be bigger than or equal to 1.');
        }

        $this->container['point_validity'] = $point_validity;

        return $this;
    }

    /**
     * Gets spending_rate
     *
     * @return int
     */
    public function getSpendingRate()
    {
        return $this->container['spending_rate'];
    }

    /**
     * Sets spending_rate
     *
     * @param int $spending_rate Exchange rate between loyalty points and currency for spending points
     *
     * @return $this
     */
    public function setSpendingRate($spending_rate)
    {
        $this->container['spending_rate'] = $spending_rate;

        return $this;
    }

    /**
     * Gets allow_fallback
     *
     * @return bool
     */
    public function getAllowFallback()
    {
        return $this->container['allow_fallback'];
    }

    /**
     * Sets allow_fallback
     *
     * @param bool $allow_fallback Allow/disallow use of currency conversion rate for spending points
     *
     * @return $this
     */
    public function setAllowFallback($allow_fallback)
    {
        $this->container['allow_fallback'] = $allow_fallback;

        return $this;
    }

    /**
     * Gets allow_mixed_payment
     *
     * @return bool
     */
    public function getAllowMixedPayment()
    {
        return $this->container['allow_mixed_payment'];
    }

    /**
     * Sets allow_mixed_payment
     *
     * @param bool $allow_mixed_payment Allow/disallow partial payment in currency for products bought with loyalty points
     *
     * @return $this
     */
    public function setAllowMixedPayment($allow_mixed_payment)
    {
        $this->container['allow_mixed_payment'] = $allow_mixed_payment;

        return $this;
    }

    /**
     * Gets tiers
     *
     * @return \Swagger\Client\Model\Tiers
     */
    public function getTiers()
    {
        return $this->container['tiers'];
    }

    /**
     * Sets tiers
     *
     * @param \Swagger\Client\Model\Tiers $tiers tiers
     *
     * @return $this
     */
    public function setTiers($tiers)
    {
        $this->container['tiers'] = $tiers;

        return $this;
    }

    /**
     * Gets active_applications
     *
     * @return \Swagger\Client\Model\LoyaltyProgramActivation[]
     */
    public function getActiveApplications()
    {
        return $this->container['active_applications'];
    }

    /**
     * Sets active_applications
     *
     * @param \Swagger\Client\Model\LoyaltyProgramActivation[] $active_applications A list of applications that have this loyalty program active
     *
     * @return $this
     */
    public function setActiveApplications($active_applications)
    {
        $this->container['active_applications'] = $active_applications;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


